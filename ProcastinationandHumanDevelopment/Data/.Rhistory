<- sd(x[[property]], na.rm = TRUE)
report <- setNames(data.frame(medIQR, mnsd, min, max, sdABV, (max - min)),
c("Median", "Mean", "Min", "Max", "StandardDeviation", "Range"))
# Digits rounds the output of report to two digits
kable(report, digits = 3, caption = paste0("Summary Statisitics for", property, sep = " "))
}
funcsummary(tidydata18_67, "Age")
funcsummary <- function(x, property){
medIQR <- median_IQR(x[[property]], na.rm = TRUE)
mnsd <- mean_sd(x[[property]],  na.rm = TRUE, denote_sd = "paren")
min <- min(x[[property]], na.rm = TRUE)
max <- max(x[[property]], na.rm = TRUE)
#<- sd(x[[property]], na.rm = TRUE)
report <- setNames(data.frame(medIQR, mnsd, min, max, (max - min)),
c("Median", "Mean", "Min", "Max", "Range"))
# Digits rounds the output of report to two digits
kable(report, digits = 3, caption = paste0("Summary Statisitics for", property, sep = " "))
}
funcsummary(tidydata18_67, "Age")
funcsummary <- function(x, property){
medIQR <- median_iqr(x[[property]], na.rm = TRUE)
mnsd <- mean_sd(x[[property]],  na.rm = TRUE, denote_sd = "paren")
min <- min(x[[property]], na.rm = TRUE)
max <- max(x[[property]], na.rm = TRUE)
#<- sd(x[[property]], na.rm = TRUE)
report <- setNames(data.frame(medIQR, mnsd, min, max, (max - min)),
c("Median", "Mean", "Min", "Max", "Range"))
# Digits rounds the output of report to two digits
kable(report, digits = 3, caption = paste0("Summary Statisitics for", property, sep = " "))
}
funcsummary(tidydata18_67, "Age")
library(knitr)
library(dplyr)
tidydata18_67 <- subset(tidydata1, Age > 18 & Age < 67.6)
funcsummary <- function(x, property){
med <- median(x[[property]], na.rm = TRUE)
IQR <- iqr(x[[property]], na.rm = TRUE)
mnsd <- mean_sd(x[[property]],  na.rm = TRUE, denote_sd = "paren")
min <- min(x[[property]], na.rm = TRUE)
max <- max(x[[property]], na.rm = TRUE)
#<- sd(x[[property]], na.rm = TRUE)
report <- setNames(data.frame(med, IQR, mnsd, min, max, (max - min)),
c("Median", "IQR", "Mean", "Min", "Max", "Range"))
# Digits rounds the output of report to two digits
kable(report, digits = 3, caption = paste0("Summary Statisitics for", property, sep = " "))
}
funcsummary(tidydata18_67, "Age")
tidydata18_67 <- subset(tidydata1, Age > 18 & Age < 67.6)
funcsummary <- function(x, property){
med <- median(x[[property]], na.rm = TRUE)
IQR <- IQR(x[[property]], na.rm = TRUE)
mnsd <- mean_sd(x[[property]],  na.rm = TRUE, denote_sd = "paren")
min <- min(x[[property]], na.rm = TRUE)
max <- max(x[[property]], na.rm = TRUE)
#<- sd(x[[property]], na.rm = TRUE)
report <- setNames(data.frame(med, IQR, mnsd, min, max, (max - min)),
c("Median", "IQR", "Mean", "Min", "Max", "Range"))
# Digits rounds the output of report to two digits
kable(report, digits = 3, caption = paste0("Summary Statisitics for", property, sep = " "))
}
funcsummary(tidydata18_67, "Age")
tidydata18_67 <- subset(tidydata1, Age > 18 & Age < 67.6)
funcsummary <- function(x, property){
med <- median(x[[property]], na.rm = TRUE)
IQR <- IQR(x[[property]], na.rm = TRUE)
mn <- mean(x[[property]],  na.rm = TRUE)
sd <- sd(x[[property]],  na.rm = TRUE)
min <- min(x[[property]], na.rm = TRUE)
max <- max(x[[property]], na.rm = TRUE)
#<- sd(x[[property]], na.rm = TRUE)
report <- setNames(data.frame(med, IQR, mn, sd, min, max, (max - min)),
c("Median", "IQR", "Mean", "SD", "Min", "Max", "Range"))
# Digits rounds the output of report to two digits
kable(report, digits = 3, caption = paste0("Summary Statisitics for", property, sep = " "))
}
funcsummary(tidydata18_67, "Age")
funcsummary(tidydata18_67, "AnnIncome")
funcsummary(tidydata18_67, "HDI")
setwd("~/6306DoingDataScience/6306CaseStudy2/Data")
rawdata<-read.csv("Procrastination.csv", header=TRUE)
nrow(rawdata)
ncol(rawdata)
tidydata<-rawdata
colnames(tidydata)<-c("Age", "Gender", "Kids", "Education", "WorkStatus", "AnnIncome", "Occupation","TenureY",
"TenureM", "CommSize", "Country", "Marital", "Sons", "Daughters", "DP1", "DP2", "DP3", "DP4", "DP5",
"AIP1", "AIP2", "AIP3", "AIP4", "AIP5", "AIP6", "AIP7", "AIP8", "AIP9", "AIP10", "AIP11", "AIP12",
"AIP13", "AIP14", "AIP15", "GP1", "GP2", "GP3", "GP4", "GP5", "GP6", "GP7", "GP8", "GP9", "GP10",
"GP11", "GP12", "GP13", "GP14", "GP15", "GP16", "GP17", "GP18", "GP19", "GP20", "SWLS1", "SWLS2",
"SWLS3", "SWLS4", "SWLS5", "SelfP", "OthersP")
char<-c("Gender", "Kids", "Education", "WorkStatus", "Occupation", "CommSize", "Country", "Marital", "Sons", "SelfP", "OthersP")
tidydata[char] <- sapply(tidydata[char], as.factor)
tidydata$TenureY<-round(tidydata$TenureY)
tidydata$TenureY<-as.integer(tidydata$TenureY)
tidydata$TenureY[tidydata$TenureY ==999] <- NA
tidydata$Country[tidydata$Country == '0'] <- ""
tidydata$Sons[tidydata$Sons == 'Male'] <- 1
tidydata$Sons[tidydata$Sons == 'Female'] <- 2
tidydata$Sons<-as.integer(tidydata$Sons)
tidydata$Occupation<-trimws(tidydata$Occupation, which=c("left"))
tidydata$Occupation <- gsub("(?<=^| )([a-z])", "\\U\\1", tolower(tidydata$Occupation), perl = T)
tidydata$Occupation[tidydata$Occupation == '0'] <- ""
tidydata$Occupation[tidydata$Occupation == 'Please Specify'] <- ""
tidydata$Occupation[tidydata$Occupation == 'Na'] <- ""
tidydata$Occupation[tidydata$Occupation == 'Ouh'] <- ""
tidydata$Occupation[tidydata$Occupation == 'Fdsdf'] <- ""
tidydata$Occupation[tidydata$Occupation == 'Abc'] <- ""
tidydata$Occupation[tidydata$Occupation == 'S'] <- ""
tidydata$Occupation[grepl("Teacher", tidydata$Occupation, ignore.case=FALSE)] <- "Educator"
tidydata$Occupation[grepl("Educator", tidydata$Occupation, ignore.case=FALSE)] <- "Educator"
tidydata$Occupation[grepl("Professor", tidydata$Occupation, ignore.case=FALSE)] <- "Educator"
tidydata$Occupation[grepl("College Faculty", tidydata$Occupation, ignore.case=FALSE)] <- "Educator"
tidydata$Occupation[grepl("Profucer", tidydata$Occupation, ignore.case=FALSE)] <- "Educator"
tidydata$Occupation[grepl("Education Specialist", tidydata$Occupation, ignore.case=FALSE)] <- "Educator"
tidydata$Occupation[grepl("Assistant", tidydata$Occupation, ignore.case=FALSE)] <- "Assistant"
tidydata$Occupation[grepl("Asst", tidydata$Occupation, ignore.case=FALSE)] <- "Assistant"
tidydata$Occupation[grepl("Student", tidydata$Occupation, ignore.case=FALSE)] <- "Student"
tidydata$Occupation[grepl("Doctoral", tidydata$Occupation, ignore.case=FALSE)] <- "Student"
tidydata$Occupation[grepl("Postdoc", tidydata$Occupation, ignore.case=FALSE)] <- "Student"
tidydata$Occupation[grepl("Studey", tidydata$Occupation, ignore.case=FALSE)] <- "Student"
tidydata$Occupation[grepl("School", tidydata$Occupation, ignore.case=FALSE)] <- "Student"
tidydata$Occupation[grepl("Nurse", tidydata$Occupation, ignore.case=FALSE)] <- "Nurse"
tidydata$Occupation[grepl("RN", tidydata$Occupation, ignore.case=FALSE)] <- "Nurse"
tidydata$Occupation[grepl("LPN", tidydata$Occupation, ignore.case=FALSE)] <- "Nurse"
tidydata$Occupation[grepl("CRNA", tidydata$Occupation, ignore.case=FALSE)] <- "Nurse"
tidydata$Occupation[grepl("Programmer", tidydata$Occupation, ignore.case=FALSE)] <- "Programmer"
tidydata$Occupation[grepl("Developer", tidydata$Occupation, ignore.case=FALSE)] <- "Programmer"
tidydata$Occupation[grepl("Engineer", tidydata$Occupation, ignore.case=FALSE)] <- "Engineer"
tidydata$Occupation[grepl("Consultant", tidydata$Occupation, ignore.case=FALSE)] <- "Consultant"
tidydata$Occupation[grepl("Businesswoman", tidydata$Occupation, ignore.case=FALSE)] <- "Business"
tidydata$Occupation[grepl("Sales", tidydata$Occupation, ignore.case=FALSE)] <- "Sales"
tidydata$Occupation[grepl("Mktg", tidydata$Occupation, ignore.case=FALSE)] <- "Marketing"
tidydata$Occupation[grepl("Supervisor", tidydata$Occupation, ignore.case=FALSE)] <- "Supervisor"
tidydata$Occupation[grepl("Coordinatore Operativo", tidydata$Occupation, ignore.case=FALSE)] <- "Operational Coordinator"
tidydata$Occupation[grepl("MD", tidydata$Occupation, ignore.case=FALSE)] <- "Doctor"
tidydata$Occupation[grepl("VMD", tidydata$Occupation, ignore.case=FALSE)] <- "Veternarian"
tidydata$Occupation[grepl("Psychologis", tidydata$Occupation, ignore.case=FALSE)] <- "Psychologist"
tidydata$Occupation[grepl("Gove Service", tidydata$Occupation, ignore.case=FALSE)] <- "Civil Service"
tidydata$Occupation[grepl("Government", tidydata$Occupation, ignore.case=FALSE)] <- "Civil Service"
tidydata$Occupation[grepl("Vidoe", tidydata$Occupation, ignore.case=FALSE)] <- "Video"
tidydata$DPMean <- rowMeans(subset(tidydata, select = c(DP1, DP2, DP3, DP4, DP5)), na.rm = TRUE)
tidydata$AIPMean <- rowMeans(subset(tidydata, select = c(AIP1, AIP2, AIP3, AIP4, AIP5, AIP6, AIP7, AIP8, AIP9, AIP10, AIP11, AIP12, AIP13, AIP14, AIP15)), na.rm = TRUE)
tidydata$GPMean <- rowMeans(subset(tidydata, select = c(GP1, GP2, GP3, GP4, GP5, GP6, GP7, GP8, GP9, GP10, GP11, GP12, GP13, GP14, GP15, GP16, GP17, GP18, GP19, GP20)), na.rm = TRUE)
tidydata$SWLSMean <- rowMeans(subset(tidydata, select = c(SWLS1, SWLS2, SWLS3, SWLS4, SWLS5)), na.rm = TRUE)
tidydata$AIPMean<-round(tidydata$AIPMean, digits=0)
NATidy<-sapply(tidydata, function(y) sum(length(which(is.na(y)))))
summary(tidydata)
str(tidydata)
NATidy
library(rvest)
library(stringr)
# Question 3
url <- "https://en.wikipedia.org/wiki/List_of_countries_by_Human_Development_Index#Complete_list_of_countries"
webpage <- read_html(url)
# Determined tables 4 - 14 to contain the Human Development Index data
# Created an empty list, 'tbls' to house the results of the webscrape
tbls <- list()
for (i in c(4,5,7,8,10,11,13,14)){
tbls[i] <- webpage %>%
html_nodes("table") %>%
.[i] %>%
html_table(fill = TRUE)
}
tbls
# Used plyr command from dplyr package to convert tbls into a data frame called HDI_df
HDI_df <- (plyr::ldply(tbls))
# Created 'df2' to combine Country/Territory and Country columns of HDI_df
df2 <- data.frame(HDI_df = c(HDI_df[,"Country/Territory"], HDI_df[,"Country"]))
df2 <- sapply(df2, as.character)
# Removed NAs from df2 dataframe
df2 <- setNames(as.data.frame(df2[complete.cases(df2), ]), "Country")
# Removed "Change in rank" info from df2
df2 <- subset(df2, Country != "Change in rank from previous year[1]")
# Removed "Change in rank" info from HDI_df
HDI_df <- HDI_df[-c(1, 28, 54, 83, 112, 133, 155, 177), ]
#HDI_df2 combines HDI_df and df2 via cbind command
HDI_df2 <- cbind(HDI_df, df2)
# Question 3a. Subset unnecessary columns leaving only HDI and Country
HDI_df2 <- HDI_df2[,-c(1, 2, 4)]
# Re-index the columns for better presentation in R
rownames(HDI_df2) <- NULL
# Question 3b Create a new column categorizing the countries
# Convert the HDI column to numeric data
HDI_df2$HDI <- as.numeric(HDI_df2$HDI)
# Create levels via the cut command to mirro the webiste table categories with Swaziland being
# the cutoff for Low Human Development, Moldova being the cutoff for Medium Human Development,
# Belarus being the cutoff for High Human Development, and Norway being at the very top
# for very High Human Development
HDI_df2$HDICategory<- cut(HDI_df2$HDI, c(-Inf, 0.549, 0.699, 0.799, Inf))
levels(HDI_df2$HDICategory) <- c("Low human development", "Medium human development",
"High human development", "Very high human development")
write.csv(HDI_df2, "~/6306DoingDataScience/6306CaseStudy2/Data/HumanDevelopmentIndex.csv", row.names = FALSE)
# Israel is mispelled as Isreal in the dataset and needs to be replaced prior to merging
tidydata$Country <- str_replace(tidydata$Country, "Isreal", "Israel")
tidydata1 <- merge(HDI_df2, tidydata, by = "Country", all = TRUE)
library(knitr)
library(dplyr)
# Based on average retirement ages worldwide, source https://tradingeconomics.com/country-list/retirement-age-men, decided to remove all data
# above the age of 67.5
tidydata18_67 <- subset(tidydata1, Age > 18 & Age < 67.6)
funcsummary <- function(x, property){
med <- median(x[[property]], na.rm = TRUE)
IQR <- IQR(x[[property]], na.rm = TRUE)
mn <- mean(x[[property]],  na.rm = TRUE)
sd <- sd(x[[property]],  na.rm = TRUE)
min <- min(x[[property]], na.rm = TRUE)
max <- max(x[[property]], na.rm = TRUE)
#<- sd(x[[property]], na.rm = TRUE)
report <- setNames(data.frame(med, IQR, mn, sd, min, max, (max - min)),
c("Median", "IQR", "Mean", "SD", "Min", "Max", "Range"))
# Digits rounds the output of report to two digits
kable(report, digits = 3, caption = paste0("Summary Statisitics for", property, sep = " "))
}
funcsummary(tidydata18_67, "Age")
funcsummary(tidydata18_67, "AnnIncome")
funcsummary(tidydata18_67, "HDI")
funcsummary(tidydata18_67, "DPMean")
funcsummary(tidydata18_67, "AIPMean")
funcsummary(tidydata18_67, "GPMean")
funcsummary(tidydata18_67, "SWLSMean")
hist(tidydata18_67$AIPMean, col = "blue3")
hist(tidydata18_67$GPMean, col = "grey")
hist(tidydata18_67$AnnIncome, col = "blue3")
hist(tidydata18_67$GPMean, col = "grey")
?hist
hist(tidydata18_67$AnnIncome, col = "blue3", main = "Histogram of Annual Income",
xlab = "Annual Income in USD")
hist(tidydata18_67$GPMean, col = "grey", main = "Histogram of the General Procrastination Mean",
xlab = "Mean of General Procastation Scale")
str(tidydata18_67)
?count
count(tidydata18_67$WorkStatus)
?as.factor
tidydata18_67$WorkStatus <- as.factor(tidydata18_67$WorkStatus)
str(tidydata18_67$WorkStatus)
tidydata18_67$WorkStatus <- as.factor(tidydata18_67$WorkStatus)
count(tidydata18_67)
count(tidydata18_67, "WorkStatus")
count(tidydata18_67, 'WorkStatus')
library(knitr)
library(dplyr)
library(plyr)
count(tidydata18_67, 'WorkStatus')
?sapply
?colnames
?sapply
tidydata18_67$WorkStatus <- as.factor(tidydata18_67$WorkStatus)
freq_vec <- c(tidydata18_67$Gender, tidydata18_67$WorkStatus, tidydata18_67$Occupation)
freq_table <- sapply(freq_vec, count)
freq_table
tidydata18_67$WorkStatus <- as.factor(tidydata18_67$WorkStatus)
tidydata18_67$Gender <- as.factor(tidydata18_67$Gender)
tidydata18_67$Occupation <- as.factor(tidydata18_67$Occupation)
ws <- as.data.frame(count(tidydata18_67, 'Workstatus'))
ws
gen <- as.data.frame(count(tidydata18_67, 'Gender'))
gen
occ <- as.data.frame(count(tidydata18_67, 'Occupation'))
occ
ws <- as.data.frame(count(tidydata18_67, 'WorkStatus'))
ws
ws <- as.data.frame(count(tidydata18_67, 'WorkStatus'))
kable(ws, caption = "Frequency of Work Status Responses")
gen <- as.data.frame(count(tidydata18_67, 'Gender'))
kable(gen, caption = "Frequency of Gender Responses"
occ <- as.data.frame(count(tidydata18_67, 'Occupation'))
kable(occ, caption = "Frequency of Occupation Responses")
ws <- as.data.frame(count(tidydata18_67, 'WorkStatus'))
kable(ws, caption = "Frequency of Work Status Responses")
gen <- as.data.frame(count(tidydata18_67, 'Gender'))
kable(gen, caption = "Frequency of Gender Responses")
occ <- as.data.frame(count(tidydata18_67, 'Occupation'))
kable(occ, caption = "Frequency of Occupation Responses")
ppc <- as.data.frame(count(tiday18_67, 'Country'))
tidydata18_67$Country <- as.factor(tidydata18_67$Country)
?order
ppc <- as.data.frame(order(count(tidydata18_67, 'Country'), decreasing = TRUE))
kable(ppc, caption = "Frequency of Response per Country")
ppc <- as.data.frame(count(tidydata18_67, 'Country'))
kable(ppc, caption = "Frequency of Response per Country")
kable(order(ppc, decreasing = TRUE), caption = "Frequency of Response per Country")
?kable
ppc <- as.data.frame(count(tidydata18_67, 'Country'))
ppc <- order(ppc, decreasing = TRUE)
kable(ppc, caption = "Frequency of Response per Country")
ppc <- as.data.frame(count(tidydata18_67, 'Country'))
kable(ppc, caption = "Frequency of Response per Country")
ppc <- as.data.frame(count(tidydata18_67, 'Country'))
ppc <- ppc[with(ppc, order("freq")), ]
kable(ppc, caption = "Frequency of Response per Country")
ppc <- as.data.frame(count(tidydata18_67, 'Country'))
kable(ppc, caption = "Frequency of Response per Country")
ppc <- as.data.frame(count(tidydata18_67, 'Country'))
ppc <- ppc[order(-freq), ]
kable(ppc, caption = "Frequency of Response per Country")
ppc <- as.data.frame(count(tidydata18_67, 'Country'))
ppc <- ppc[order(freq), ]
kable(ppc, caption = "Frequency of Response per Country")
ppc <- as.data.frame(count(tidydata18_67, 'Country'))
ppc <- ppc[order(freq), ]
ppc
ppc <- as.data.frame(count(tidydata18_67, 'Country'))
ppc <- ppc[order("freq"), ]
ppc
ppc <- as.data.frame(count(tidydata18_67, 'Country'))
ppc <- ppc[order('freq'), ]
ppc
ppc <- setNames(as.data.frame(count(tidydata18_67, 'Country'), c("Names", "Frequency")))
ppc <- ppc[order(Frequency), ]
ppc
ppc <- setNames(as.data.frame(count(tidydata18_67, 'Country', sort = TRUE)))
ppc
tidydata18_67$Country <- as.factor(tidydata18_67$Country)
str(tidydata18_67$Country)
ppc <- as.data.frame(count(tidydata18_67, 'Country', sort = TRUE))
ppc
library(knitr)
library(dplyr)
library(plyr)
# Based on average retirement ages worldwide, source https://tradingeconomics.com/country-list/retirement-age-men, decided to remove all data
# above the age of 67.5
tidydata18_67 <- subset(tidydata1, Age > 18 & Age < 67.6)
funcsummary <- function(x, property){
med <- median(x[[property]], na.rm = TRUE)
IQR <- IQR(x[[property]], na.rm = TRUE)
mn <- mean(x[[property]],  na.rm = TRUE)
sd <- sd(x[[property]],  na.rm = TRUE)
min <- min(x[[property]], na.rm = TRUE)
max <- max(x[[property]], na.rm = TRUE)
#<- sd(x[[property]], na.rm = TRUE)
report <- setNames(data.frame(med, IQR, mn, sd, min, max, (max - min)),
c("Median", "IQR", "Mean", "SD", "Min", "Max", "Range"))
# Digits rounds the output of report to two digits
kable(report, digits = 3, caption = paste0("Summary Statisitics for", property, sep = " "))
}
funcsummary(tidydata18_67, "Age")
funcsummary(tidydata18_67, "AnnIncome")
funcsummary(tidydata18_67, "HDI")
funcsummary(tidydata18_67, "DPMean")
funcsummary(tidydata18_67, "AIPMean")
funcsummary(tidydata18_67, "GPMean")
funcsummary(tidydata18_67, "SWLSMean")
hist(tidydata18_67$AnnIncome, col = "blue3", main = "Histogram of Annual Income",
xlab = "Annual Income in USD")
hist(tidydata18_67$GPMean, col = "grey", main = "Histogram of the General Procrastination Mean",
xlab = "Mean of General Procastation Scale")
#AnnIncome is right skewed while GPMean is left skewed
tidydata18_67$WorkStatus <- as.factor(tidydata18_67$WorkStatus)
tidydata18_67$Gender <- as.factor(tidydata18_67$Gender)
tidydata18_67$Occupation <- as.factor(tidydata18_67$Occupation)
#tidydata18_67$Country <- as.factor(tidydata18_67$Country)
#str(tidydata18_67$Country)
ws <- as.data.frame(count(tidydata18_67, 'WorkStatus'))
kable(ws, caption = "Frequency of Work Status Responses")
gen <- as.data.frame(count(tidydata18_67, 'Gender'))
kable(gen, caption = "Frequency of Gender Responses")
occ <- as.data.frame(count(tidydata18_67, 'Occupation'))
kable(occ, caption = "Frequency of Occupation Responses")
ppc <- tally(group_by(tidydata18_67, Country), sort = TRUE)
ppc
kable(ppc, caption = "Frequency of Response per Country")
class(ppc)
ppc <- setNames(tally(group_by(tidydata18_67, Country), sort = TRUE), c("Country", "Count"))
ppc
kable(ppc, caption = "Frequency of Response per Country")
library(knitr)
library(dplyr)
library(plyr)
# Based on average retirement ages worldwide, source https://tradingeconomics.com/country-list/retirement-age-men, decided to remove all data
# above the age of 67.5
tidydata18_67 <- subset(tidydata1, Age > 18 & Age < 67.6)
funcsummary <- function(x, property){
med <- median(x[[property]], na.rm = TRUE)
IQR <- IQR(x[[property]], na.rm = TRUE)
mn <- mean(x[[property]],  na.rm = TRUE)
sd <- sd(x[[property]],  na.rm = TRUE)
min <- min(x[[property]], na.rm = TRUE)
max <- max(x[[property]], na.rm = TRUE)
#<- sd(x[[property]], na.rm = TRUE)
report <- setNames(data.frame(med, IQR, mn, sd, min, max, (max - min)),
c("Median", "IQR", "Mean", "SD", "Min", "Max", "Range"))
# Digits rounds the output of report to two digits
kable(report, digits = 3, caption = paste0("Summary Statisitics for", property, sep = " "))
}
funcsummary(tidydata18_67, "Age")
funcsummary(tidydata18_67, "AnnIncome")
funcsummary(tidydata18_67, "HDI")
funcsummary(tidydata18_67, "DPMean")
funcsummary(tidydata18_67, "AIPMean")
funcsummary(tidydata18_67, "GPMean")
funcsummary(tidydata18_67, "SWLSMean")
hist(tidydata18_67$AnnIncome, col = "blue3", main = "Histogram of Annual Income",
xlab = "Annual Income in USD")
hist(tidydata18_67$GPMean, col = "grey", main = "Histogram of the General Procrastination Mean",
xlab = "Mean of General Procastation Scale")
#AnnIncome is right skewed while GPMean is left skewed
tidydata18_67$WorkStatus <- as.factor(tidydata18_67$WorkStatus)
tidydata18_67$Gender <- as.factor(tidydata18_67$Gender)
tidydata18_67$Occupation <- as.factor(tidydata18_67$Occupation)
#tidydata18_67$Country <- as.factor(tidydata18_67$Country)
#str(tidydata18_67$Country)
ws <- as.data.frame(count(tidydata18_67, 'WorkStatus'))
kable(ws, caption = "Frequency of Work Status Responses")
gen <- as.data.frame(count(tidydata18_67, 'Gender'))
kable(gen, caption = "Frequency of Gender Responses")
occ <- as.data.frame(count(tidydata18_67, 'Occupation'))
kable(occ, caption = "Frequency of Occupation Responses")
ppc <- setNames(tally(group_by(tidydata18_67, Country), sort = TRUE), c("Country", "Count"))
kable(ppc, caption = "Frequency of Response per Country")
library(knitr)
library(dplyr)
library(plyr)
# Based on average retirement ages worldwide, source https://tradingeconomics.com/country-list/retirement-age-men, decided to remove all data
# above the age of 67.5
tidydata18_67 <- subset(tidydata1, Age > 18 & Age < 67.6)
funcsummary <- function(x, property){
med <- median(x[[property]], na.rm = TRUE)
IQR <- IQR(x[[property]], na.rm = TRUE)
mn <- mean(x[[property]],  na.rm = TRUE)
sd <- sd(x[[property]],  na.rm = TRUE)
min <- min(x[[property]], na.rm = TRUE)
max <- max(x[[property]], na.rm = TRUE)
#<- sd(x[[property]], na.rm = TRUE)
report <- setNames(data.frame(med, IQR, mn, sd, min, max, (max - min)),
c("Median", "IQR", "Mean", "SD", "Min", "Max", "Range"))
# Digits rounds the output of report to two digits
kable(report, digits = 3, caption = paste0("Summary Statisitics for", property, sep = " "))
}
funcsummary(tidydata18_67, "Age")
funcsummary(tidydata18_67, "AnnIncome")
funcsummary(tidydata18_67, "HDI")
funcsummary(tidydata18_67, "DPMean")
funcsummary(tidydata18_67, "AIPMean")
funcsummary(tidydata18_67, "GPMean")
funcsummary(tidydata18_67, "SWLSMean")
hist(tidydata18_67$AnnIncome, col = "blue3", main = "Histogram of Annual Income",
xlab = "Annual Income in USD")
hist(tidydata18_67$GPMean, col = "blue3", main = "Histogram of the General Procrastination Mean",
xlab = "Mean of General Procastation Scale")
#AnnIncome is right skewed while GPMean is left skewed
tidydata18_67$WorkStatus <- as.factor(tidydata18_67$WorkStatus)
tidydata18_67$Gender <- as.factor(tidydata18_67$Gender)
tidydata18_67$Occupation <- as.factor(tidydata18_67$Occupation)
#tidydata18_67$Country <- as.factor(tidydata18_67$Country)
#str(tidydata18_67$Country)
ws <- as.data.frame(count(tidydata18_67, 'WorkStatus'))
kable(ws, caption = "Frequency of Work Status Responses")
gen <- as.data.frame(count(tidydata18_67, 'Gender'))
kable(gen, caption = "Frequency of Gender Responses")
occ <- as.data.frame(count(tidydata18_67, 'Occupation'))
kable(occ, caption = "Frequency of Occupation Responses")
ppc <- setNames(tally(group_by(tidydata18_67, Country), sort = TRUE), c("Country", "Count"))
kable(ppc, caption = "Frequency of Response per Country")
View(tidydata18_67)
tidydata18_67[, `:=`(ProsMatch, grepl("SelfP", "OthersP")), by = "SelfP"]
tidydata18_67[, ProsMatch := grepl("SelfP", "OthersP"), by = "SelfP"]
tidydata18_67[, ProsMatch := grepl("SelfP", "OthersP"), by = SelfP]
tidydata18_67[, ProsMatch := grepl("SelfP", "OthersP")]
tidydata18_67[, ProsMatch := grepl("SelfP", "OthersP"), by = 'SelfP']
tidydata18_67[, ProsMatch := grepl("SelfP", "OthersP"), by = x]
tidydata18_67$ProsMatch <- mapply(grepl, pattern = tidydata18_67$SelfP, x = tidydata18_67$OthersP)
class(tidydata18_67$ProsMatch)
match <- setNames(tally(group_by(tidydata18_67, ProsMatch)), c("Logical", "Count"))
kable(match, caption = "Number of Matches")
kable(match, caption = "Number of Self Perception Matches")
library(knitr)
library(dplyr)
library(plyr)
# Based on average retirement ages worldwide, source https://tradingeconomics.com/country-list/retirement-age-men, decided to remove all data
# above the age of 67.5
tidydata18_67 <- subset(tidydata1, Age > 18 & Age < 67.6)
funcsummary <- function(x, property){
med <- median(x[[property]], na.rm = TRUE)
IQR <- IQR(x[[property]], na.rm = TRUE)
mn <- mean(x[[property]],  na.rm = TRUE)
sd <- sd(x[[property]],  na.rm = TRUE)
min <- min(x[[property]], na.rm = TRUE)
max <- max(x[[property]], na.rm = TRUE)
#<- sd(x[[property]], na.rm = TRUE)
report <- setNames(data.frame(med, IQR, mn, sd, min, max, (max - min)),
c("Median", "IQR", "Mean", "SD", "Min", "Max", "Range"))
# Digits rounds the output of report to two digits
kable(report, digits = 3, caption = paste0("Summary Statisitics for", property, sep = " "))
}
funcsummary(tidydata18_67, "Age")
funcsummary(tidydata18_67, "AnnIncome")
funcsummary(tidydata18_67, "HDI")
funcsummary(tidydata18_67, "DPMean")
funcsummary(tidydata18_67, "AIPMean")
funcsummary(tidydata18_67, "GPMean")
funcsummary(tidydata18_67, "SWLSMean")
hist(tidydata18_67$AnnIncome, col = "blue3", main = "Histogram of Annual Income",
xlab = "Annual Income in USD")
hist(tidydata18_67$GPMean, col = "blue3", main = "Histogram of the General Procrastination Mean",
xlab = "Mean of General Procastation Scale")
#AnnIncome is right skewed while GPMean is left skewed
tidydata18_67$WorkStatus <- as.factor(tidydata18_67$WorkStatus)
tidydata18_67$Gender <- as.factor(tidydata18_67$Gender)
tidydata18_67$Occupation <- as.factor(tidydata18_67$Occupation)
#tidydata18_67$Country <- as.factor(tidydata18_67$Country)
#str(tidydata18_67$Country)
ws <- as.data.frame(count(tidydata18_67, 'WorkStatus'))
kable(ws, caption = "Frequency of Work Status Responses")
gen <- as.data.frame(count(tidydata18_67, 'Gender'))
kable(gen, caption = "Frequency of Gender Responses")
occ <- as.data.frame(count(tidydata18_67, 'Occupation'))
kable(occ, caption = "Frequency of Occupation Responses")
ppc <- setNames(tally(group_by(tidydata18_67, Country), sort = TRUE), c("Country", "Count"))
kable(ppc, caption = "Frequency of Response per Country")
tidydata18_67$ProsMatch <- mapply(grepl, pattern = tidydata18_67$SelfP, x = tidydata18_67$OthersP)
#tidydata18_67[, ProsMatch := grepl("SelfP", "OthersP"), by = x]
match <- setNames(tally(group_by(tidydata18_67, ProsMatch)), c("Logical", "Count"))
kable(match, caption = "Number of Self Perception Matches")
