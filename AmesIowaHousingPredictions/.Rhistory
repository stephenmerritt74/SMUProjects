names(train)[which(train == "?", arr.ind=T)[, "col"]]
names(train)[which(train == "|", arr.ind=T)[, "col"]]
library(dplyr)
library(purrr)
library(broom)
library(ggplot2)
library(readr)
library(tibble)
train <- as_tibble(read_csv("~/6372AppliedStatisticsInferenceandModeling /Project1/Train_Auto.csv"))
glimpse(train)
names(train) <- gsub(x = names(train),
pattern = "\\-",
replacement = "")
glimpse(train)
names(train)[which(train == "?", arr.ind=T)[, "col"]]
names(train)[which(train == "I", arr.ind=T)[, "col"]]
#Load packages
library(dplyr)
library(rvest)
library(stringr)
library(RSelenium)
library(beepr)
install.packages("RSelenium")
install.packages("beepr")
install.packages("RSelenium")
#Load packages
library(dplyr)
library(rvest)
library(stringr)
library(beepr)
#Manually paste the URL for the search results here
link = "https://www.virtualvocations.com/"
#Get the html source of the URL
hlink = html(link)
#Load packages
library(dplyr)
library(rvest)
library(stringr)
library(beepr)
#Manually paste the URL for the search results here
link = "https://www.virtualvocations.com/"
#Get the html source of the URL
hlink = read_html(link)
#Extract Job Title
hlink %>% html_nodes("#main_section") %>%
html_nodes(".tpjob_item") %>% html_nodes(".tpjob_title") %>%
html_text() %>% data.frame(stringsAsFactors = FALSE) -> a
names(a) = "Title"
1-pf(8.35889, 2, 3)
1-pf(10.8480, 2, 9)
1-pf(5.1147, 2, 9)
?glm
1-pf(6.1376, 2, 9)
install.packages("XML")
library(XML)
u = 'https://www.kaggle.com/jobs/18884'
doc = htmlParse(u)
doc
tbls = getNodeSet(doc, "//table[@class = 'post ']")
length(tbls)
library(XML)
u = 'https://www.kaggle.com/jobs/18884'
doc = htmlParse(u)
doc
tbls = getNodeSet(doc, "//table[@class = ' ']")
length(tbls)
library(XML)
u = 'https://www.kaggle.com/jobs/18884'
doc = htmlParse(u)
doc
tbls = getNodeSet(doc, "//div[@class = 'JobsContainer ']")
length(tbls)
library(XML)
u = 'https://www.virtualvocations.com/job/telecommute-business-analyst-454356.html'
p = getFormParams(u)
install.packages("rcurl")
install.packages("RCurl")
library(XML)
library(RCurl)
u = 'https://www.virtualvocations.com/job/telecommute-business-analyst-454356.html'
p = getFormParams(u)
library(XML)
library(RCurl)
u = 'https://www.virtualvocations.com/job/telecommute-business-analyst-454356.html'
p = getFormParams(u)
p
library(XML)
library(RCurl)
u = 'https://www.virtualvocations.com/q-telecommuting-business-analyst-jobs.html'
p = getFormParams(u)
p
library(XML)
library(RCurl)
u = 'https://www.flexjobs.com/search?search=business+analyst&exclude=&location=&country=&will_travel%5B%5D=&accolade='
p = getFormParams(u)
p
library(XML)
library(RCurl)
u = 'https://www.flexjobs.com/search?search=business+analyst&exclude=&location=&country=&will_travel%5B%5D=&accolade='
p = getFormParams(u)
p
txt = getForm("https://www.flexjobs.com/", search = '"business+analyst"', exclude = "", location = "",
country = "", will_travel%5B%5D = "", accolade = "")
doc = htmlParse(txt, asText = TRUE)
library(XML)
library(RCurl)
u = 'https://www.flexjobs.com/search?search=business+analyst&exclude=&location=&country=&will_travel%5B%5D=&accolade='
p = getFormParams(u)
p
txt = getForm("https://www.flexjobs.com/search", search = '"business+analyst"', exclude = "", location = "",
country = "", will_travel%5B%5D = "", accolade = "")
doc = htmlParse(txt, asText = TRUE)
?getForm
library(XML)
library(RCurl)
u = 'https://www.flexjobs.com/search?search=business+analyst&exclude=&location=&country=&will_travel%5B%5D=&accolade='
p = getFormParams(u)
p
txt = getForm("https://www.flexjobs.com/search", search = '"business+analyst"', exclude = "",
location = "", country = "", will_travel%5B%5D = "", accolade = "")
doc = htmlParse(txt, asText = TRUE)
txt = getForm("https://www.flexjobs.com/search", search = '"business+analyst"', exclude = " ",
location = " ", country = " ", will_travel%5B%5D = " ", accolade = " ")
doc = htmlParse(txt, asText = TRUE)
txt = getForm("https://www.flexjobs.com/search", search = '"business+analyst"', exclude = " ",
location = " ", country = " ", will_travel = " ", accolade = " ")
doc = htmlParse(txt, asText = TRUE)
doc
links = getNodeSet(doc, "//div[@class = 'col-sm-6'/a/@href")
links = getNodeSet(doc, "//div[@class = 'col-sm-6']/a/@href")
links
links = getNodeSet(doc, "//div[@class = 'col-sm-6']h5/a/@href")
node = getNodeSet(doc, "//li[@class = 'list-group-item']")[[1]]
node
node = getNodeSet(doc, "//ul[@class = 'joblist']")[[1]]
node
node = getNodeSet(doc, "//ul[@class = 'joblist']")[[1]]
node
node = getNodeSet(doc, "//ul[@class = 'list-group']")[[1]]
node
links = getNodeSet(doc, "//h5/a[starts-with(@href, '/HostedJob.aspx?')]/@href")[[1]]
links
flexu = 'https://www.flexjobs.com/HostedJob.aspx?id=723499'
flexdoc = htmlParse(flexu)
flexdoc
library(XML)
library(RCurl)
u = 'https://www.flexjobs.com/search?search=business+analyst&exclude=&location=&country=&will_travel%5B%5D=&accolade='
p = getFormParams(u)
p
txt = getForm("https://www.flexjobs.com/search", search = '"business+analyst"', exclude = " ",
location = " ", country = " ", will_travel = " ", accolade = " ")
doc = htmlParse(txt, asText = TRUE)
doc
flexu = 'https://www.flexjobs.com/HostedJob.aspx?id=723499'
flexdoc = htmlParse(flexu)
flexdoc
tbls = getNodeSet(flexdoc, "//table[@class = 'table table-striped table-condensed ']")
length(tbls)
flexu = 'https://www.flexjobs.com/HostedJob.aspx?id=723499'
flexdoc = htmlParse(flexu)
flexdoc
tbls = getNodeSet(flexdoc, "//table[@class = 'table table-striped table-condensed']")
length(tbls)
install.packages("httr")
library(XML)
library(httr)
library(RCurl)
# Define certicificate file
cafile <- system.file("CurlSSL", "cacert.pem", package = "RCurl")
# Read page
page <- GET(
"https://www.flexjobs.com/",
path="HostedJob.aspx?id=723499",
config(cainfo = cafile, ssl.verifypeer = FALSE)
)
h = htmlParse(page)
ns <- getNodeSet(h, "//table[@class = 'table table-striped table-condensed']")
ns
# Define certicificate file
cafile <- system.file("CurlSSL", "cacert.pem", package = "RCurl")
# Read page
page <- GET(
"https://www.flexjobs.com/",
path="HostedJob.aspx?id=723499",
config(cainfo = cafile)
)
h = htmlParse(page)
ns <- getNodeSet(h, "//table[@class = 'table table-striped table-condensed']")
ns
?cafile
?system.file
?GET
names(ns)
table = ns[[1]]
names(table)
row1 = table[[1]]
names(row1)
row2 = table[[2]]
names(row2)
row3 = table[[3]]
names(row3)
row5 = table[[5]]
names(row5)
row6 = table[[6]]
names(row6)
xmlAttrs(row3[[3]])
xmlAttrs(row3[[2]])
xmlAttrs(row3[[1]])
xmlAttrs(row3[[2]])
xmlAttrs(row6[[2]])
xmlAttrs(row3[[0]])
xmlAttrs(row3[[1]])
txt = xmlValue(row3[[2]])
txt
txt = xmlValue(row6[[2]])
txt
library(XML)
library(httr)
library(RCurl)
# Define certicificate file
cafile <- system.file("CurlSSL", "cacert.pem", package = "RCurl")
# Read page
page <- GET(
"https://www.flexjobs.com/",
path="HostedJob.aspx?id=723499",
config(cainfo = cafile)
)
h = htmlParse(page)
ns <- getNodeSet(h, "//table[@class = 'table table-striped table-condensed']")
ns
tbls = readHTMLTable(page)
# Define certicificate file
cafile <- system.file("CurlSSL", "cacert.pem", package = "RCurl")
# Read page
page <- GET(
"https://www.flexjobs.com/",
path="HostedJob.aspx?id=723499",
config(cainfo = cafile)
)
tbls = readHTMLTable(page)
u1 = 'https://www.simplyhired.com/search?q=business+analyst&l=ponte+vedra+beach%2C+fl&job=a8CdeAR2PQSv2j7cqjhvyvSP7_AbegagGb4WUid9SqhOmPS2DPY9uw'
p1 = getFormParams(u)
u1 = 'https://www.simplyhired.com/search?q=business+analyst&l=ponte+vedra+beach%2C+fl&job=a8CdeAR2PQSv2j7cqjhvyvSP7_AbegagGb4WUid9SqhOmPS2DPY9uw'
p1 = getFormParams(u1)
p1
txt = getForm("https://www.simplyhired.com/search", q = '"business+analyst"', l = "ponte+vedra+beach%2C+fl",
job = "a8CdeAR2PQSv2j7cqjhvyvSP7_AbegagGb4WUid9SqhOmPS2DPY9uw")
doc = htmlParse(txt, asText = TRUE)
doc
pagez <- GET(
"https://www.ziprecruiter.com/jobs/",
path="talentyeti-9e6d2816/business-analyst-ba3b0010",
config(cainfo = cafile)
)
hz = htmlParse(pagez)
hz
library(XML)
library(httr)
library(RCurl)
pagez <- GET(
"https://www.ziprecruiter.com/jobs/",
path="talentyeti-9e6d2816/business-analyst-ba3b0010",
config(cainfo = cafile)
)
hz = htmlParse(pagez)
hz
cafile <- system.file("CurlSSL", "cacert.pem", package = "RCurl")
pagez <- GET(
"https://www.ziprecruiter.com/jobs/",
path="talentyeti-9e6d2816/business-analyst-ba3b0010",
config(cainfo = cafile)
)
hz = htmlParse(pagez)
hz
# Define certicificate file
cafile <- system.file("CurlSSL", "cacert.pem", package = "RCurl")
# Read page
pagefj <- GET(
"https://www.flexjobs.com/",
path="HostedJob.aspx?id=723499",
config(cainfo = cafile)
)
jobfj = htmlParse(pagefj)
ns <- getNodeSet(jobfj, "//table[@class = 'table table-striped table-condensed']")
ns
jobfj = htmlParse(pagefj)
tblfj <- getNodeSet(jobfj, "//table[@class = 'table table-striped table-condensed']")
tblfj
jobfj = htmlParse(pagefj)
nsfj <- getNodeSet(jobfj, "//table[@class = 'table table-striped table-condensed']")
nsfj
tblfj = nsfj[[1]]
names(tblfj)
rowfj3 = tbfj[[3]]
names(rowfj3)
rowfj3 = tblfj[[3]]
names(rowfj3)
txt = xmlValue(rowfj3[[2]])
txt
tblfj = readHTMLTable(nsfj[[1]])
tblfj
tblfj = xmlToDataFrame(nsfj[[1]])
tblfj
View(nsfj)
View(tblfj)
jobfj = htmlParse(pagefj)
nsfj <- getNodeSet(jobfj, "//table[@class = 'table table-striped table-condensed']")
tblfj = xmlToDataFrame(nsfj)
tblfj
jobfj = htmlParse(pagefj)
nsfj <- getNodeSet(jobfj, "//table[@class = 'table table-striped table-condensed']")
tblfj = xmlToDataFrame(nsfj[[1]])
tblfj
jobfj = htmlParse(pagefj)
nsfj <- getNodeSet(jobfj, "//table[@class = 'table table-striped table-condensed']")
tblfj = xmlToDataFrame(nsfj[[1]])
tblfj
View(tblfj)
jobfj = htmlParse(pagefj)
nsfj <- getNodeSet(jobfj, "//table[@class = 'table table-striped table-condensed']")
nsfj
jobfj = htmlParse(pagefj)
nsfj <- getNodeSet(jobfj, "//table[@class = 'table table-striped table-condensed']")
nsfj
tblfj = readHTMLTable(nsfj[[1]])
tblfj
View(tblfj)
View(tblfj)
jobfj = htmlParse(pagefj)
nsfj <- getNodeSet(jobfj, "//table[@class = 'table table-striped table-condensed']")
nsfj
tblfj = readHTMLTable(nsfj)
tblfj
?readHTMLTable
jobfj = htmlParse(pagefj)
nsfj <- getNodeSet(jobfj, "//table[@class = 'table table-striped table-condensed']")
nsfj
tblfj = readHTMLTable(nsfj, header = NA)
tblfj
jobfj = htmlParse(pagefj)
nsfj <- getNodeSet(jobfj, "//table[@class = 'table table-striped table-condensed']")
nsfj
tblfj = readHTMLTable(nsfj, header = FALSE)
tblfj
jobfj = htmlParse(pagefj)
jobfj
View(tblfj)
View(tblfj)
View(tblfj)
jobfj = htmlParse(pagefj)
nsfj <- getNodeSet(jobfj, "//table[@class = 'table table-striped table-condensed']")
nsfj
jobfj = htmlParse(pagefj)
nsfj <- getNodeSet(jobfj, "//table[@class = 'table table-striped table-condensed']")
nsfj
tblfj = xmlToList(nsfj)
tblfj
View(tblfj)
jobfj = htmlParse(pagefj)
nsfj <- getNodeSet(jobfj, "//div[@class = 'table-responsive']")
nsfj
jobfj = htmlParse(pagefj)
nsfj <- getNodeSet(jobfj, "//div[@class = 'table-responsive']")
nsfj
tblfj = readHTMLTable(nsfj)
tblfj
jobfj = htmlParse(pagefj)
nsfj <- getNodeSet(jobfj, "//table[@class = 'table table-striped table-condensed']")
nsfj
jobfj = htmlParse(pagefj)
ulsfj <- getNodeSet(pagefj, ".//div/following-sibling::ul")
ulfsj
jobfj = htmlParse(pagefj)
ulsfj <- getNodeSet(jobfj, ".//div/following-sibling::ul")
ulfsj
ulsfj
jobfj = htmlParse(pagefj)
ulsfj <- getNodeSet(jobfj, ".//div[@class = 'col-xs-12 col-md-9'/following-sibling::ul")
ulsfj
jobfj = htmlParse(pagefj)
ulsfj <- getNodeSet(jobfj, "//div[@class = 'col-xs-12 col-md-9']")
ulsfj
jobfj = htmlParse(pagefj)
ulsfj <- getNodeSet(jobfj, "//li[@class = 'active']")
ulsfj
jobfj = htmlParse(pagefj)
ulsfj <- getNodeSet(jobfj, "//h1[@class = 'job-title']")
ulsfj
ulsfj[1]
jobfj = htmlParse(pagefj)
ulsfj <- getNodeSet(jobfj, "//h1[@class = 'job-title']")
xmlValue(ulsfj)
jobfj = htmlParse(pagefj)
ulsfj <- getNodeSet(jobfj, "//h1[@class = 'job-title']")
items = xpathSApply(uslfj[[1]], ".//li", xmlValue)
items
jobfj = htmlParse(pagefj)
ulsfj <- getNodeSet(jobfj, "//h1[@class = 'job-title']")
items = xpathSApply(ulsfj[[1]], ".//li", xmlValue)
items
jobfj = htmlParse(pagefj)
ulsfj <- getNodeSet(jobfj, "//h1[@class = 'job-title']")
items = xpathSApply(ulsfj[[0]], ".//li", xmlValue)
items
jobfj = htmlParse(pagefj)
ulsfj <- getNodeSet(jobfj, "//h1[@class = 'job-title']")
items = xpathSApply(ulsfj[1], ".//li", xmlValue)
items
items = lapply(ulsfj[1], ".//li", xmlValue)
items
items = lapply(ulsfj[1], xmlValue)
items
library(XML)
library(httr)
library(RCurl)
# Scrape FlexJobs Website, https://www.flexjobs.com for Data Scientist, Data Analyst, and Business Analyst jobs
# Because site is HTTPS, need to use the RCurl package
# Define certicificate file
cafile <- system.file("CurlSSL", "cacert.pem", package = "RCurl")
# Read page
pagefj <- GET(
"https://www.flexjobs.com/",
path="HostedJob.aspx?id=723499",
config(cainfo = cafile)
)
jobfj = htmlTreeParse(pagefj)
jobjf
jobfj
jobfj = htmlParse(pagefj)
ulsfj <- getNodeSet(jobfj, "//h1[@class = 'job-title']")
items = lapply(ulsfj[1], xmlValue)
items
jobfj = htmlParse(pagefj)
jobfj
h1fj <- getNodeSet(jobfj, "//h1")
h1fj
nsfj <- getNodeSet(jobfj, "//table[@class = 'table table-striped table-condensed']")
nsfj
h1fj <- xpathSApply(jobfj, "//h1", xmlGetAttr, "h1")
h1fj
h1fj <- getNodeSet(jobfj, "//h1", xmlGetAttr, "h1")
h1fj
h1fj <- getNodeSet(jobfj, "//h1")
h1fj
h1fj <- xpathSApply(jobfj, "//h1", xmlValue)
h1fj
nsfj <- xpathSApply(jobfj, "//table[@class = 'table table-striped table-condensed']", xmlValue)
nsfj
gsub('\\\\[a-z]', '', nsfj)
nsfj1
nsfj1 <- gsub('\\\\[a-z]', '', nsfj)
nsfj1
nsfj <- xpathSApply(jobfj, "//table[@class = 'table table-striped table-condensed']", xmlValue)
nsfj
class(nsfj)
library(XML)
library(httr)
library(RCurl)
library(stringr)
str_split(nsfj, "\n\t\t")
str_split(nsfj, "\\s+")
str_replace_all(nsfj, "\\s+", " ")
library(XML)
library(httr)
library(RCurl)
library(stringr)
# Scrape FlexJobs Website, https://www.flexjobs.com for Data Scientist, Data Analyst, and Business Analyst jobs
# Because site is HTTPS, need to use the RCurl package
# Define certicificate file
cafile <- system.file("CurlSSL", "cacert.pem", package = "RCurl")
# Read page
pagefj <- GET(
"https://www.flexjobs.com/",
path="HostedJob.aspx?id=723499",
config(cainfo = cafile)
)
jobfj = htmlParse(pagefj)
jobfj
h1fj <- xpathSApply(jobfj, "//h1", xmlValue)
h1fj
nsfj <- xpathSApply(jobfj, "//table[@class = 'table table-striped table-condensed']", xmlValue)
nsfj
str_replace_all(nsfj, "\\s+", " ")
jobfj = htmlParse(pagefj)
jobfj
h1fj <- xpathSApply(jobfj, "//h1", xmlValue)
h1fj
nsfj <- xpathSApply(jobfj, "//table[@class = 'table table-striped table-condensed']", xmlValue)
nsfj
str_replace_all(nsfj, "\\s+", " ")
str_match(nsfj, "[A-Za-z]+\s([A-Za-z]+):\s([0-9]+)/([0-9]+)/([0-9]+)")
str_match(nsfj, "[A-Za-z]+\\s([A-Za-z]+):\\s([0-9]+)/([0-9]+)/([0-9]+)")
tr_match(nsfj, "([A-Za-z]+\\s([A-Za-z]+):\\s([0-9]+)/([0-9]+)/([0-9]+))")
str_match(nsfj, "([A-Za-z]+\\s([A-Za-z]+):\\s([0-9]+)/([0-9]+)/([0-9]+))")
source('/Users/Steve/SMUProjects/AmesIowaHousingPredictions/Code/TestCleanEDA.R', echo=TRUE)
View(bsmtCondNA)
source('/Users/Steve/SMUProjects/AmesIowaHousingPredictions/Code/TestCleanEDA.R', echo=TRUE)
source('/Users/Steve/SMUProjects/AmesIowaHousingPredictions/Code/TestCleanEDA.R', echo=TRUE)
source('/Users/Steve/SMUProjects/AmesIowaHousingPredictions/Code/TestCleanEDA.R', echo=TRUE)
source('~/SMUProjects/AmesIowaHousingPredictions/Code/TrainCleanEDA.R', echo=TRUE)
source('~/SMUProjects/AmesIowaHousingPredictions/Code/TrainCleanEDA.R', echo=TRUE)
source('/Users/Steve/SMUProjects/AmesIowaHousingPredictions/Code/EDAModel.R', echo=TRUE)
source('/Users/Steve/SMUProjects/AmesIowaHousingPredictions/Code/EDAModel.R', echo=TRUE)
source('/Users/Steve/SMUProjects/AmesIowaHousingPredictions/Code/EDAModel.R', echo=TRUE)
source('/Users/Steve/SMUProjects/AmesIowaHousingPredictions/Code/EDAModel.R', echo=TRUE)
source('/Users/Steve/SMUProjects/AmesIowaHousingPredictions/Code/EDAModel.R', echo=TRUE)
source('/Users/Steve/SMUProjects/AmesIowaHousingPredictions/Code/EDAModel.R', echo=TRUE)
source('/Users/Steve/SMUProjects/AmesIowaHousingPredictions/Code/EDAModel.R', echo=TRUE)
source('/Users/Steve/SMUProjects/AmesIowaHousingPredictions/Code/EDAModel.R', echo=TRUE)
source('/Users/Steve/SMUProjects/AmesIowaHousingPredictions/Code/EDAModel.R', echo=TRUE)
source('/Users/Steve/SMUProjects/AmesIowaHousingPredictions/Code/EDAModel.R', echo=TRUE)
